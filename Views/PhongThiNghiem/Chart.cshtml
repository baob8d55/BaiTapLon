@model IEnumerable<BaiTapLon.Models.TbPhongThiNghiem>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.0.1"></script>
@{
    ViewData["Title"] = "Chart";
}

<head>
    <meta charset="utf-8">
    <title>Visualize Data Beautifully Using JS Charts</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <style>
        /* Phong cách cho nhãn */
        label {
            font-family: 'Arial', sans-serif;
            font-size: 20px;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }

        /* Phong cách cho dropdown */
        #chartDropdown {
            width: 90%;
            max-width: 700px; /* Tăng kích thước tối đa */
            padding: 12px 16px;
            font-size: 15px;
            font-family: 'Arial', sans-serif;
            color: #333;
            background-color: #f9f9f9;
            border: 2px solid #ddd;
            border-radius: 8px;
            outline: none;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Hiệu ứng bóng */
            transition: all 0.25s ease;
            /* Căn giữa theo chiều ngang */
            display: block; /* Đảm bảo là khối */
            margin: 0 auto; /* Căn giữa ngang */
        }

            /* Hiệu ứng hover */
            #chartDropdown:hover {
                background-color: #fff;
                border-color: green;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

            /* Hiệu ứng khi focus */
            #chartDropdown:focus {
                border-color: darkgreen;
                box-shadow: lightgreen;
            }
            /* Tùy chỉnh các tùy chọn trong dropdown */
            #chartDropdown option {
                padding: 10px;
                font-size: 15px;
                color: #333;
                background-color: #fff; /* Màu nền mặc định */
                transition: background-color 0.3s ease;
            }
        /* Hiệu ứng cho tiêu đề */
        h1 {
            font-family: 'Arial', sans-serif;
            font-size: 40px;
            color: #444;
            margin-bottom: 20px;
            font-weight: bold;
        }

    </style>
</head>
<label for="customDropdown">HÃY CHỌN BIỂU ĐỒ MÀ BẠN MUỐN XEM</label>
<div class="custom-dropdown" id="customDropdown">
    <select id="chartDropdown" style="margin-bottom:100px" class="dropdown-btn">
        <option value="">Lựa chọn biểu đồ</option>
        <option value="chart1">Biểu đồ 1: Mức độ đáp ứng</option>
        <option value="chart2">Biểu đồ 2: Lĩnh vực nghiên cứu</option>
        <option value="chart3">Biểu đồ 3: Loại phòng thí nghiệm </option>
    </select>
</div>
<br></br>

<div id="chart1" class="chart-container" style="width: 700px; height: 900px; margin: 0 auto;">
<h1 style="text-align: center;">Mức độ đáp ứng</h1>
<canvas id="pieChartMucDoDapUng"></canvas>
</div>

<script>
    var mucDoLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.MucDoDapUngNhuCauNckh).Distinct().ToList()));
    var mucDoData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.GroupBy(x => x.MucDoDapUngNhuCauNckh).Select(g => g.Count()).ToList()
    ));

    function getRandomColor() {
        return `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.6)`;
    }

    var randomBackgroundColors = mucDoLabels.map(() => getRandomColor());
    var randomBorderColors = randomBackgroundColors.map(color => color.replace('0.6', '1'));

    new Chart(document.getElementById('pieChartMucDoDapUng').getContext('2d'), {
        type: 'pie',
        data: {
            labels: mucDoLabels,
            datasets: [{
                data: mucDoData,
                backgroundColor: randomBackgroundColors,
                borderColor: randomBorderColors,
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                title: {
                    display: true,
                    text: 'Biểu đồ: Mức Độ Đáp Ứng Nhu Cầu',
                    font: { size: 18, weight: 'bold' }
                }
            }
        }
    });
</script>

<div id="chart2" class="chart-container" style="width: 1500px; height: 900px; margin: auto;">
    <h1 style="text-align: center;">Lĩnh vực nghiên cứu</h1>
    <canvas id="barChartLinhVucNghienCuu"></canvas>
</div>
<script>
    var linhVucLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.IdLinhVucNavigation.LinhVucNghienCuu).Distinct().ToList()));
    var linhVucData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.GroupBy(x => x.IdLinhVucNavigation.LinhVucNghienCuu).Select(g => g.Count()).ToList()
    ));

    new Chart(document.getElementById('barChartLinhVucNghienCuu').getContext('2d'), {
        type: 'bar',
        data: {
            labels: linhVucLabels,
            datasets: [{
                label: 'Số lượng nghiên cứu',
                data: linhVucData,
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: true, position: 'top' },
                title: {
                    display: true,
                    text: 'Biểu đồ: Lĩnh Vực Nghiên Cứu',
                    font: { size: 18, weight: 'bold' }
                }
            },
            scales: {
                x: { title: { display: true, text: '', font: { size: 14, weight: 'bold' } } },
                y: {
                    title: { display: true, text: 'Số lượng nghiên cứu', font: { size: 14, weight: 'bold' } },
                    beginAtZero: true
                }
            }
        }
    });
</script>

<div id="chart3" class="chart-container" style="width: 1500px; height:900px; margin: auto;">
    <h1 style="text-align: center;">Loại phòng thí nghiệm</h1>
    <canvas id="barChartLoaiPhongThiNghiem"></canvas>
</div>
<script>
    var loaiPhongLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.IdLoaiPhongThiNghiemNavigation.LoaiPhongThiNghiem).Distinct().ToList()));
    var loaiPhongData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.GroupBy(x => x.IdLoaiPhongThiNghiemNavigation.LoaiPhongThiNghiem).Select(g => g.Count()).ToList()
    ));

    new Chart(document.getElementById('barChartLoaiPhongThiNghiem').getContext('2d'), {
        type: 'bar',
        data: {
            labels: loaiPhongLabels,
            datasets: [{
                label: 'Số lượng phòng thí nghiệm',
                data: loaiPhongData,
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: true, position: 'top' },
                title: {
                    display: true,
                    text: 'Biểu đồ: Loại Phòng Thí Nghiệm',
                    font: { size: 18, weight: 'bold' }
                }
            },
            scales: {
                x: { title: { display: true, text: '', font: { size: 14, weight: 'bold' } } },
                y: {
                    title: { display: true, text: 'Số lượng phòng', font: { size: 14, weight: 'bold' } },
                    beginAtZero: true
                }
            }
        }
    });
</script>


<script>
    // Lấy dropdown và các container biểu đồ
    const chartDropdown = document.getElementById('chartDropdown');
    const chartContainers = document.querySelectorAll('.chart-container');

    // Ẩn tất cả các biểu đồ khi tải lại trang
    window.addEventListener('DOMContentLoaded', function () {
        chartContainers.forEach(container => container.style.display = 'none');
    });

    // Lắng nghe sự kiện thay đổi trên dropdown
    chartDropdown.addEventListener('change', function () {
        // Ẩn tất cả các biểu đồ
        chartContainers.forEach(container => container.style.display = 'none');

        // Hiển thị biểu đồ được chọn
        const selectedChartId = chartDropdown.value;
        if (selectedChartId) {
            const selectedChart = document.getElementById(selectedChartId);
            if (selectedChart) {
                selectedChart.style.display = 'block';
            }
        }
    });
</script>
@* thay đổi nền cho option *@
<script>
    // Lấy các thành phần dropdown
    const dropdown = document.querySelector('.custom-dropdown');
    const dropdownBtn = dropdown.querySelector('.dropdown-btn');
    const dropdownOptions = dropdown.querySelectorAll('.dropdown-options li');

    // Hiển thị hoặc ẩn danh sách khi bấm nút
    dropdownBtn.addEventListener('click', () => {
        dropdown.classList.toggle('active');
    });

    // Cập nhật giá trị nút và ẩn danh sách khi chọn một tùy chọn
    dropdownOptions.forEach(option => {
        option.addEventListener('click', () => {
            dropdownBtn.textContent = option.textContent;
            dropdown.classList.remove('active');
            console.log('Bạn đã chọn:', option.getAttribute('data-value')); // Giá trị tùy chọn
        });
    });

    // Ẩn dropdown khi click bên ngoài
    document.addEventListener('click', (e) => {
        if (!dropdown.contains(e.target)) {
            dropdown.classList.remove('active');
        }
    });

</script>
@using Newtonsoft.Json
@model IEnumerable<BaiTapLon.Models.TbDatDai>

@{
    ViewData["Title"] = "Chart Example";
    var jsonLabels = JsonConvert.SerializeObject(Model.Select(item => item.TenDonViSoHuu).ToList());
}

<head>
    <meta charset="utf-8">
    <title>Visualize Data Beautifully Using JS Charts</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <style>
        /* Phong cách cho nhãn */
        label {
            font-family: 'Arial', sans-serif;
            font-size: 20px;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }

        /* Phong cách cho dropdown */
        #chartDropdown {
            width: 90%;
            max-width: 700px; /* Tăng kích thước tối đa */
            padding: 12px 16px;
            font-size: 15px;
            font-family: 'Arial', sans-serif;
            color: #333;
            background-color: #f9f9f9;
            border: 2px solid #ddd;
            border-radius: 8px;
            outline: none;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Hiệu ứng bóng */
            transition: all 0.25s ease;
            /* Căn giữa theo chiều ngang */
            display: block; /* Đảm bảo là khối */
            margin: 0 auto; /* Căn giữa ngang */
        }

            /* Hiệu ứng hover */
            #chartDropdown:hover {
                background-color: #fff;
                border-color: green;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

            /* Hiệu ứng khi focus */
            #chartDropdown:focus {
                border-color: darkgreen;
                box-shadow: lightgreen;
            }
            /* Tùy chỉnh các tùy chọn trong dropdown */
            #chartDropdown option {
                padding: 10px;
                font-size: 15px;
                color: #333;
                background-color: #fff; /* Màu nền mặc định */
                transition: background-color 0.3s ease;
            }
        /* Hiệu ứng cho tiêu đề */
        h1 {
            font-family: 'Arial', sans-serif;
            font-size: 42px;
            color: #444;
            margin-bottom: 20px;
            font-weight: bold;
        }

    </style>
</head>
<label for="customDropdown">HÃY CHỌN BIỂU ĐỒ MÀ BẠN MUỐN XEM</label>
<div class="custom-dropdown" id="customDropdown">
    <select id="chartDropdown" style="margin-bottom:100px" class="dropdown-btn">
        <option value="">Lựa chọn biểu đồ</option>
        <option value="chart1">Biểu đồ 1: Đơn vị sở hữu</option>
        <option value="chart2">Biểu đồ 2: Hình thức sở hữu</option>
        <option value="chart3">Biểu đồ 3: Minh chứng quyền sở hữu đất đai </option>
        <option value="chart4">Biểu đồ 4: Mục đich sử dụng đất </option>
    </select>
</div>

<div id="chart1" class="chart-container" style="width: 700px; height: 900px; margin: auto;">
<h1 style="text-align:center;"><b>Đơn vị sở hữu</b></h1>
<!-- Biểu đồ tròn -->
<canvas id="myPieChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    // Lấy dữ liệu từ Razor
    var labels = @Html.Raw(jsonLabels);

    // Lấy danh sách nhãn duy nhất
    var uniqueLabels = Array.from(new Set(labels));

    // Đếm số lần xuất hiện của mỗi nhãn
    var counts = uniqueLabels.map(function (label) {
        return labels.filter(function (l) {
            return l === label;
        }).length;
    });

    // Khởi tạo biểu đồ
    var ctx = document.getElementById('myPieChart').getContext('2d');
    var myPieChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: uniqueLabels, // Nhãn (Tên đơn vị sở hữu đất)
            datasets: [{
                data: counts, // Dữ liệu (Số lần xuất hiện)
                backgroundColor: [
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 99, 132, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            return tooltipItem.label + ': ' + tooltipItem.raw;
                        }
                    }
                }
            }
        }
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<div id="chart2" class="chart-container" style="width: 700px; height: 900px; margin: auto;">
    <h1 style="text-align: center;"><b>Hình thức sở hữu</b></h1>
    <canvas id="pieChart"></canvas>
</div>
<script>
    // Lấy dữ liệu từ Model
    var labels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.Select(item => item.IdHinhThucSoHuuNavigation.HinhThucSoHuu).Distinct()
    ));

    var counts = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.GroupBy(item => item.IdHinhThucSoHuuNavigation.HinhThucSoHuu)
             .Select(group => group.Count())
    ));

    // Khởi tạo biểu đồ tròn
    var ctx = document.getElementById('pieChart').getContext('2d');
    var pieChart = new Chart(ctx, {
        type: 'pie', // Biểu đồ tròn
        data: {
            labels: labels, // Nhãn (Hình Thức Sở Hữu)
            datasets: [{
                data: counts, // Dữ liệu
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top', // Chú thích phía trên
                },
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                            return tooltipItem.label + ': ' + tooltipItem.raw + ' mục';
                        }
                    }
                }
            }
        }
    });
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<!-- Biểu đồ Minh Chứng Quyền Sở Hữu Đất Đai -->
<div id="chart3" class="chart-container" style="width: 700px; height: 900px; margin: 0 auto;">
    <h1 style="text-align:center;">Minh Chứng Quyền Sở Hữu Đất Đai</h1>
    <canvas id="pieChartMinhChung"></canvas>
</div>

<script>
    // Hàm tạo màu ngẫu nhiên với độ trong suốt
    function getRandomColor() {
        return `rgba(${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, ${Math.floor(Math.random() * 255)}, 0.6)`;
    }

    // Dữ liệu cho Minh Chứng Quyền Sở Hữu Đất Đai
    var minhChungLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.MinhChungQuyenSoHuuDatDai).Distinct().ToList()));
    var minhChungData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.GroupBy(x => x.MinhChungQuyenSoHuuDatDai).Select(g => g.Count()).ToList()
        ));
    var minhChungColors = minhChungLabels.map(() => getRandomColor());

    // Tạo biểu đồ Minh Chứng Quyền Sở Hữu Đất Đai
    new Chart(document.getElementById('pieChartMinhChung'), {
        type: 'pie',
        data: {
            labels: minhChungLabels,
            datasets: [{
                data: minhChungData,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: '',
                    font: { size: 18, weight: 'bold' }
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            return `${tooltipItem.label}: ${tooltipItem.raw} trường hợp`;
                        }
                    }
                }
            }
        }
    });
</script>


<!-- Biểu đồ Mục Đích Sử Dụng Đất -->
<div id="chart4" class="chart-container" style="width: 700px; height: 900px; margin: 0 auto;">
    <h1 style="text-align:center;">Mục Đích Sử Dụng Đất</h1>
    <canvas id="pieChartMucDich"></canvas>
</div>

<script>   
// Dữ liệu cho Mục Đích Sử Dụng Đất
    var mucDichLabels = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Select(x => x.MucDichSuDungDat).Distinct().ToList()));
    var mucDichData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(
        Model.GroupBy(x => x.MucDichSuDungDat).Select(g => g.Count()).ToList()
        ));
    var mucDichColors = mucDichLabels.map(() => getRandomColor());

    // Tạo biểu đồ Mục Đích Sử Dụng Đất
    new Chart(document.getElementById('pieChartMucDich'), {
        type: 'pie',
        data: {
            labels: mucDichLabels,
            datasets: [{
                data: mucDichData,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: '',
                    font: { size: 18, weight: 'bold' }
                },
                tooltip: {
                    callbacks: {
                        label: function (tooltipItem) {
                            return `${tooltipItem.label}: ${tooltipItem.raw} mục đích`;
                        }
                    }
                }
            }
        }
    });
</script>

<script>
    // Lấy dropdown và các container biểu đồ
    const chartDropdown = document.getElementById('chartDropdown');
    const chartContainers = document.querySelectorAll('.chart-container');

    // Ẩn tất cả các biểu đồ khi tải lại trang
    window.addEventListener('DOMContentLoaded', function () {
        chartContainers.forEach(container => container.style.display = 'none');
    });

    // Lắng nghe sự kiện thay đổi trên dropdown
    chartDropdown.addEventListener('change', function () {
        // Ẩn tất cả các biểu đồ
        chartContainers.forEach(container => container.style.display = 'none');

        // Hiển thị biểu đồ được chọn
        const selectedChartId = chartDropdown.value;
        if (selectedChartId) {
            const selectedChart = document.getElementById(selectedChartId);
            if (selectedChart) {
                selectedChart.style.display = 'block';
            }
        }
    });
</script>
@* thay đổi nền cho option *@
<script>
    // Lấy các thành phần dropdown
    const dropdown = document.querySelector('.custom-dropdown');
    const dropdownBtn = dropdown.querySelector('.dropdown-btn');
    const dropdownOptions = dropdown.querySelectorAll('.dropdown-options li');

    // Hiển thị hoặc ẩn danh sách khi bấm nút
    dropdownBtn.addEventListener('click', () => {
        dropdown.classList.toggle('active');
    });

    // Cập nhật giá trị nút và ẩn danh sách khi chọn một tùy chọn
    dropdownOptions.forEach(option => {
        option.addEventListener('click', () => {
            dropdownBtn.textContent = option.textContent;
            dropdown.classList.remove('active');
            console.log('Bạn đã chọn:', option.getAttribute('data-value')); // Giá trị tùy chọn
        });
    });

    // Ẩn dropdown khi click bên ngoài
    document.addEventListener('click', (e) => {
        if (!dropdown.contains(e.target)) {
            dropdown.classList.remove('active');
        }
    });

</script>